ErrorHandling:
--------------
    Use try/catch/finally to handle runtime errors in JavaScript. 
    These runtime errors are called exceptions.
    Ex: referencing a variable or a method that is not defined can cause an exception.
    The JavaScript statements that can possibly cause exceptions should be wrapped inside a try block.
    When a specific line in the try block causes an exception, the control immediately transfers to the catch block skipping the rest of the code in the try block.
    
    Note : 
    1.A try block should be followed by a catch block or finally block or both.
    2.finally block is guaranteed to execute irrespective of whether there is an exception or not.
    3.It is generally used to clean and free resources that the script was holding onto during the program execution.

    Syntax errors and exceptions:
    try/catch/finally block can catch exceptions but not syntax errors.

    'throw' statement : 
    Use the 'throw' statement to raise a customized exceptions.

window onerror event:
---------------------
    In general we use try/catch statement to catch errors in JavaScript.
    But if an error is raised by a statement that is not inside a try...catch block, the onerror event is fired.
    Assign a function to "window.onerror" event that you want to be executed when an error is raised.
    onerror event handler method can also be used with HTML elements.
    
    The function that is associated as the event handler for the onerror event has three parameters:
     1.message--> Specifies the error message.
     2.URL-->   Specifies the location of the file where the error occurred.
     3.line-->  Specifies the line number where the error occurred. 

Note: If the error is handled by a try/catch statement, then the onerror event is not raised. 
       onerror event is raised only when there is an unhandled exception.
    
